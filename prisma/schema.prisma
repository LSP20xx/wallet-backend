generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blockchain {
  id           String         @id @default(uuid())
  name         String
  symbol       String @default("TEMP")
  blockchainId String         @unique
  nativeTokenSymbol String
  wallets      Wallet[]       @relation("WalletChain")
  transactions Transaction[]  @relation("TransactionChain")
  tokens       Token[]        @relation("TokenChain")
  exampleAddress      String        @default("")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  @@map("blockchains")
}

model WalletToken {
  id        String   @id @default(uuid())
  walletId  String
  tokenId   String
  symbol    String   @default("Default")
  balance   String  
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  token     Token    @relation(fields: [tokenId], references: [id])
  platform    Platform      @relation(fields: [platformId], references: [id], name: "PlatformWalletsTokens")
  platformName String @default("Billete")
  platformId  String  
  @@map("wallet_tokens")
}
model WalletFiat {
  id          String @id @default(uuid())
  userId      String
  balance     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User @relation(fields: [userId], references: [id])
  currency    FiatCurrency @relation(fields: [currencyId], references: [id])
  currencyId  String
  currencyName String @default("default")
  currencySymbol  String? @default("default")
  platform    Platform      @relation(fields: [platformId], references: [id], name: "PlatformFiatWallets")
  platformName String @default("Billete")
  platformId  String  
  @@map("wallet_fiats")
}

model Wallet {
  id                  String        @id @default(uuid())
  balance             String
  address             String?       
  encryptedPrivateKey String?       @unique
  symbol              String       @default("symbol")
  user                User          @relation(fields: [userId], references: [id], name: "UserWallets")
  userId              String
  chainType           ChainType
  network             Network
  additionalData      Json?         
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  blockchain          Blockchain?   @relation(fields: [blockchainId], references: [id], name: "WalletChain")
  blockchainId        String
  transactions        Transaction[] @relation("WalletTransactions")
  tokens              Token[]       @relation("WalletTokens")
  walletTokens        WalletToken[]
  favoriteAddresses   Json?       
  platform    Platform      @relation(fields: [platformId], references: [id], name: "PlatformWallets")
  platformName String @default("Billete")
  platformId  String  
  
  @@map("wallets")
}

model WalletContract {
  id                  String        @id @default(uuid())
  address             String        @unique
  blockchainId        String?
  reserved            Boolean       @default(false)
  chainType           ChainType
  network             Network
}

model Token {
  id              String         @id @default(uuid())
  symbol          String
  name            String
  contractAddress String?
  isNative        Boolean         @default(false)
  isLiquidity     Boolean         @default(false)
  wallet          Wallet?         @relation(fields: [walletId], references: [id], name: "WalletTokens")
  walletId        String?
  chainType       ChainType
  network         Network
  transactions    Transaction[]  @relation("TokenTransactions")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  blockchain      Blockchain?    @relation(fields: [blockchainId], references: [blockchainId], name: "TokenChain")
  blockchainId    String?
  walletTokens    WalletToken[]
  withdrawFee     String         @default("0")
  description     String?        @default("No description available")
  cryptocurrencyDataId String? @map("cryptocurrency_data_id")
  cryptocurrencyData CryptocurrencyData? @relation(fields: [cryptocurrencyDataId], references: [id])
  ticker1 Ticker[] @relation(name: "TickerToken1")
  ticker2 Ticker[] @relation(name: "TickerToken2")
  @@map("tokens")
}

model FiatCurrency {
  id       String   @id @default(uuid())
  code     String   @unique
  name     String
  symbol   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticker1 Ticker[] @relation(name: "TickerFiat1")
  ticker2 Ticker[] @relation(name: "TickerFiat2")
  walletFiats WalletFiat[]

  @@map("fiat_currencies")
}

model Ticker {
  id       String @id @default(uuid())
  symbol   String
  token1Id String?
  token2Id String?
  fiat1Id  String?
  fiat2Id  String?
  platform String
  token1 Token? @relation(fields: [token1Id], references: [id], name: "TickerToken1")
  token2 Token? @relation(fields: [token2Id], references: [id], name: "TickerToken2")
  fiat1  FiatCurrency? @relation(fields: [fiat1Id], references: [id], name: "TickerFiat1")
  fiat2  FiatCurrency? @relation(fields: [fiat2Id], references: [id], name: "TickerFiat2")

  @@map("tickers")
}


model CryptocurrencyData {
  id            String    @id @default(uuid())
  tokenId       String
  date         DateTime
  price         Float
  open          Float?
  high          Float?
  low           Float?
  close         Float?
  marketCap     Float?
  volume24h     Float?
  change24h     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tokens Token[] 
}

model Transaction {
  id         String     @id @default(uuid())
  txHash     String
  from       String
  to         String
  amount     String?
  transactionType TransactionType
  wallet     Wallet     @relation(fields: [walletId], references: [id], name: "WalletTransactions")
  walletId   String
  user       User        @relation(fields: [userId], references: [id], name: "UserTransactions")
  userId     String          
  chainType  ChainType
  network    Network
  status     TransactionStatus
  confirmations Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  blockchain Blockchain? @relation(fields: [blockchainId], references: [blockchainId], name: "TransactionChain")
  blockchainId String?
  token      Token?     @relation(fields: [tokenId], references: [id], name: "TokenTransactions")
  tokenId    String?
  tokenSymbol String @default("DEFAULT_TOKEN_NAME")
  companyFee      String   @default("0")
  networkFee      String?   @default("0")
  isNativeCoin   Boolean    @default(false)

  @@map("transactions")
}


model User {
  id                String        @id @default(uuid())
  completeName      String?
  email             String?       @unique
  phoneNumber       String?       @unique
  encryptedPassword String
  userRole          UserRole      @default(USER)
  wallets           Wallet[]      @relation("UserWallets")
  walletFiats       WalletFiat[]
  sellOrders        TradeOrder[]  @relation("UserSellOrders")
  buyOrders         TradeOrder[]  @relation("UserBuyOrders")
  sessions          Session[]     @relation("UserSessions")
  transactions      Transaction[] @relation("UserTransactions")
  verified          Boolean       @default(false)
  verificationMethods VerificationMethod[]
  termsAndConditionsAccepted Boolean @default(false)
  notifyByEmail     Boolean       @default(true)
  notifyBySms       Boolean       @default(false)
  notifyByPush      Boolean       @default(false)
  notifyByWhatsApp  Boolean       @default(false)
  localCurrency     String        @default("USD")
  language          String        @default("Espa√±ol")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  dateOfBirth       DateTime?

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], name: "UserSessions")
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}


model VerificationToken {
  id        String   @id @default(uuid())
  to        String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification_tokens")
}

model TradeOrder {
  id           String      @id @default(uuid())
  seller       User        @relation("UserSellOrders", fields: [sellerId], references: [id])
  sellerId     String
  buyer        User        @relation("UserBuyOrders", fields: [buyerId], references: [id])
  buyerId      String
  balance      String
  pricePerUnit String
  blockchainName BlockchainName
  tradeStatus  TradeStatus
  platform     Platform    @relation(fields: [platformId], references: [id], name: "PlatformOrders")
  platformId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("trade_orders")
}

model Platform {
  id       String      @id @default(uuid())
  name     String      @unique 
  address  String?
  orders   TradeOrder[] @relation("PlatformOrders")
  wallets  Wallet[] @relation("PlatformWallets")
  walletsTokens WalletToken[] @relation("PlatformWalletsTokens")
  fiatWallets WalletFiat[] @relation("PlatformFiatWallets")
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
}

enum BlockchainName {
  Ethereum
  BnbChain
  Polygon
  Avalanche
  Fantom
  Solana 
  Bitcoin
  Litecoin
  Dogecoin
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum TradeStatus {
  OPEN 
  IN_PROGRESS 
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  APPROVED
  PROCESSED
  PROCESSING
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}

enum ChainType {
  EVM
  UTXO
  SOLANA
}

enum Network {
  MAINNET
  TESTNET
}

enum VerificationMethod {
  EMAIL
  SMS
  GOOGLE_AUTHENTICATOR
  SIGN_IN_AND_SIGN_UP_WITH_GOOGLE
  SIGN_IN_AND_SIGN_UP_WITH_FACEBOOK
}